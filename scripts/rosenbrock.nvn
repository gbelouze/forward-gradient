def autodiff pure rosenbrock(x: number, y: number) with
    return (1 - x)^2 + 100 * (y - x^2)^2

optimiser = "adam"
learningRate = if optimiser == "sgd" then 0.005 else 0.01

x_rosenbrock = -1.0
y_rosenbrock = 0
autodiff Scalar "Rosenbrock" \
    epochs:10k \
    learningRate:learningRate \
    optimiser:optimiser with
    params x_rosenbrock
    params y_rosenbrock
    return (rosenbrock(x_rosenbrock, y_rosenbrock), \
            x: x_rosenbrock, \
            y: y_rosenbrock)

x_rosenbrock_forward_bernoulli = -1.0
y_rosenbrock_forward_bernoulli = 0
autodiff Scalar "Rosenbrock forward Bernoulli" \
    mode:"forward" \
    epochs:10k \
    forwardLaw:"bernoulli" \
    learningRate:learningRate \
    optimiser:optimiser with
    params x_rosenbrock_forward_bernoulli
    params y_rosenbrock_forward_bernoulli
    return (rosenbrock(x_rosenbrock_forward_bernoulli, y_rosenbrock_forward_bernoulli), \
            x: x_rosenbrock_forward_bernoulli, \
            y: y_rosenbrock_forward_bernoulli)

x_rosenbrock_forward_gaussian = -1.0
y_rosenbrock_forward_gaussian = 0
autodiff Scalar "Rosenbrock forward Gaussian" \
    mode:"forward" \
    epochs:10k \
    forwardLaw:"gaussian" \
    learningRate:learningRate \
    optimiser:optimiser with
    params x_rosenbrock_forward_gaussian
    params y_rosenbrock_forward_gaussian
    return (rosenbrock(x_rosenbrock_forward_gaussian, y_rosenbrock_forward_gaussian), \
            x: x_rosenbrock_forward_gaussian, \
            y: y_rosenbrock_forward_gaussian)

show table "Beale & Brock" with
    x_rosenbrock as "x_rosenbrock"
    y_rosenbrock as "y_rosenbrock"

    x_rosenbrock_forward_gaussian as "x_rosenbrock_forward_gaussian"
    y_rosenbrock_forward_gaussian as "y_rosenbrock_forward_gaussian"
    x_rosenbrock_forward_bernoulli as "x_rosenbrock_forward_bernoulli"
    y_rosenbrock_forward_bernoulli as "y_rosenbrock_forward_bernoulli"
